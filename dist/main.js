(()=>{"use strict";var n={721:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(537),i=t.n(r),o=t(645),a=t.n(o)()(i());a.push([n.id,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n\n/* Document\n   ========================================================================== */\n\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n    line-height: 1.15;\n    /* 1 */\n    -webkit-text-size-adjust: 100%;\n    /* 2 */\n}\n\n\n/* Sections\n     ========================================================================== */\n\n\n/**\n   * Remove the margin in all browsers.\n   */\n\nbody {\n    margin: 0;\n}\n\n\n/**\n   * Render the `main` element consistently in IE.\n   */\n\nmain {\n    display: block;\n}\n\n\n/**\n   * Correct the font size and margin on `h1` elements within `section` and\n   * `article` contexts in Chrome, Firefox, and Safari.\n   */\n\nh1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n}\n\n\n/* Grouping content\n     ========================================================================== */\n\n\n/**\n   * 1. Add the correct box sizing in Firefox.\n   * 2. Show the overflow in Edge and IE.\n   */\n\nhr {\n    box-sizing: content-box;\n    /* 1 */\n    height: 0;\n    /* 1 */\n    overflow: visible;\n    /* 2 */\n}\n\n\n/**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n\npre {\n    font-family: monospace, monospace;\n    /* 1 */\n    font-size: 1em;\n    /* 2 */\n}\n\n\n/* Text-level semantics\n     ========================================================================== */\n\n\n/**\n   * Remove the gray background on active links in IE 10.\n   */\n\na {\n    background-color: transparent;\n}\n\n\n/**\n   * 1. Remove the bottom border in Chrome 57-\n   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n   */\n\nabbr[title] {\n    border-bottom: none;\n    /* 1 */\n    text-decoration: underline;\n    /* 2 */\n    text-decoration: underline dotted;\n    /* 2 */\n}\n\n\n/**\n   * Add the correct font weight in Chrome, Edge, and Safari.\n   */\n\nb,\nstrong {\n    font-weight: bolder;\n}\n\n\n/**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n\ncode,\nkbd,\nsamp {\n    font-family: monospace, monospace;\n    /* 1 */\n    font-size: 1em;\n    /* 2 */\n}\n\n\n/**\n   * Add the correct font size in all browsers.\n   */\n\nsmall {\n    font-size: 80%;\n}\n\n\n/**\n   * Prevent `sub` and `sup` elements from affecting the line height in\n   * all browsers.\n   */\n\nsub,\nsup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n}\n\nsub {\n    bottom: -0.25em;\n}\n\nsup {\n    top: -0.5em;\n}\n\n\n/* Embedded content\n     ========================================================================== */\n\n\n/**\n   * Remove the border on images inside links in IE 10.\n   */\n\nimg {\n    border-style: none;\n}\n\n\n/* Forms\n     ========================================================================== */\n\n\n/**\n   * 1. Change the font styles in all browsers.\n   * 2. Remove the margin in Firefox and Safari.\n   */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n    font-family: inherit;\n    /* 1 */\n    font-size: 100%;\n    /* 1 */\n    line-height: 1.15;\n    /* 1 */\n    margin: 0;\n    /* 2 */\n}\n\n\n/**\n   * Show the overflow in IE.\n   * 1. Show the overflow in Edge.\n   */\n\nbutton,\ninput {\n    /* 1 */\n    overflow: visible;\n}\n\n\n/**\n   * Remove the inheritance of text transform in Edge, Firefox, and IE.\n   * 1. Remove the inheritance of text transform in Firefox.\n   */\n\nbutton,\nselect {\n    /* 1 */\n    text-transform: none;\n}\n\n\n/**\n   * Correct the inability to style clickable types in iOS and Safari.\n   */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n    -webkit-appearance: button;\n}\n\n\n/**\n   * Remove the inner border and padding in Firefox.\n   */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n}\n\n\n/**\n   * Restore the focus styles unset by the previous rule.\n   */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n    outline: 1px dotted ButtonText;\n}\n\n\n/**\n   * Correct the padding in Firefox.\n   */\n\nfieldset {\n    padding: 0.35em 0.75em 0.625em;\n}\n\n\n/**\n   * 1. Correct the text wrapping in Edge and IE.\n   * 2. Correct the color inheritance from `fieldset` elements in IE.\n   * 3. Remove the padding so developers are not caught out when they zero out\n   *    `fieldset` elements in all browsers.\n   */\n\nlegend {\n    box-sizing: border-box;\n    /* 1 */\n    color: inherit;\n    /* 2 */\n    display: table;\n    /* 1 */\n    max-width: 100%;\n    /* 1 */\n    padding: 0;\n    /* 3 */\n    white-space: normal;\n    /* 1 */\n}\n\n\n/**\n   * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n   */\n\nprogress {\n    vertical-align: baseline;\n}\n\n\n/**\n   * Remove the default vertical scrollbar in IE 10+.\n   */\n\ntextarea {\n    overflow: auto;\n}\n\n\n/**\n   * 1. Add the correct box sizing in IE 10.\n   * 2. Remove the padding in IE 10.\n   */\n\n[type="checkbox"],\n[type="radio"] {\n    box-sizing: border-box;\n    /* 1 */\n    padding: 0;\n    /* 2 */\n}\n\n\n/**\n   * Correct the cursor style of increment and decrement buttons in Chrome.\n   */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n    height: auto;\n}\n\n\n/**\n   * 1. Correct the odd appearance in Chrome and Safari.\n   * 2. Correct the outline style in Safari.\n   */\n\n[type="search"] {\n    -webkit-appearance: textfield;\n    /* 1 */\n    outline-offset: -2px;\n    /* 2 */\n}\n\n\n/**\n   * Remove the inner padding in Chrome and Safari on macOS.\n   */\n\n[type="search"]::-webkit-search-decoration {\n    -webkit-appearance: none;\n}\n\n\n/**\n   * 1. Correct the inability to style clickable types in iOS and Safari.\n   * 2. Change font properties to `inherit` in Safari.\n   */\n\n ::-webkit-file-upload-button {\n    -webkit-appearance: button;\n    /* 1 */\n    font: inherit;\n    /* 2 */\n}\n\n\n/* Interactive\n     ========================================================================== */\n\n\n/*\n   * Add the correct display in Edge, IE 10+, and Firefox.\n   */\n\ndetails {\n    display: block;\n}\n\n\n/*\n   * Add the correct display in all browsers.\n   */\n\nsummary {\n    display: list-item;\n}\n\n\n/* Misc\n     ========================================================================== */\n\n\n/**\n   * Add the correct display in IE 10+.\n   */\n\ntemplate {\n    display: none;\n}\n\n\n/**\n   * Add the correct display in IE 10.\n   */\n\n[hidden] {\n    display: none;\n}',"",{version:3,sources:["webpack://./src/styles/nomarlize.css"],names:[],mappings:"AAAA,2EAA2E;;;AAG3E;+EAC+E;;;AAG/E;;;EAGE;;AAEF;IACI,iBAAiB;IACjB,MAAM;IACN,8BAA8B;IAC9B,MAAM;AACV;;;AAGA;iFACiF;;;AAGjF;;IAEI;;AAEJ;IACI,SAAS;AACb;;;AAGA;;IAEI;;AAEJ;IACI,cAAc;AAClB;;;AAGA;;;IAGI;;AAEJ;IACI,cAAc;IACd,gBAAgB;AACpB;;;AAGA;iFACiF;;;AAGjF;;;IAGI;;AAEJ;IACI,uBAAuB;IACvB,MAAM;IACN,SAAS;IACT,MAAM;IACN,iBAAiB;IACjB,MAAM;AACV;;;AAGA;;;IAGI;;AAEJ;IACI,iCAAiC;IACjC,MAAM;IACN,cAAc;IACd,MAAM;AACV;;;AAGA;iFACiF;;;AAGjF;;IAEI;;AAEJ;IACI,6BAA6B;AACjC;;;AAGA;;;IAGI;;AAEJ;IACI,mBAAmB;IACnB,MAAM;IACN,0BAA0B;IAC1B,MAAM;IACN,iCAAiC;IACjC,MAAM;AACV;;;AAGA;;IAEI;;AAEJ;;IAEI,mBAAmB;AACvB;;;AAGA;;;IAGI;;AAEJ;;;IAGI,iCAAiC;IACjC,MAAM;IACN,cAAc;IACd,MAAM;AACV;;;AAGA;;IAEI;;AAEJ;IACI,cAAc;AAClB;;;AAGA;;;IAGI;;AAEJ;;IAEI,cAAc;IACd,cAAc;IACd,kBAAkB;IAClB,wBAAwB;AAC5B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;AACf;;;AAGA;iFACiF;;;AAGjF;;IAEI;;AAEJ;IACI,kBAAkB;AACtB;;;AAGA;iFACiF;;;AAGjF;;;IAGI;;AAEJ;;;;;IAKI,oBAAoB;IACpB,MAAM;IACN,eAAe;IACf,MAAM;IACN,iBAAiB;IACjB,MAAM;IACN,SAAS;IACT,MAAM;AACV;;;AAGA;;;IAGI;;AAEJ;;IAEI,MAAM;IACN,iBAAiB;AACrB;;;AAGA;;;IAGI;;AAEJ;;IAEI,MAAM;IACN,oBAAoB;AACxB;;;AAGA;;IAEI;;AAEJ;;;;IAII,0BAA0B;AAC9B;;;AAGA;;IAEI;;AAEJ;;;;IAII,kBAAkB;IAClB,UAAU;AACd;;;AAGA;;IAEI;;AAEJ;;;;IAII,8BAA8B;AAClC;;;AAGA;;IAEI;;AAEJ;IACI,8BAA8B;AAClC;;;AAGA;;;;;IAKI;;AAEJ;IACI,sBAAsB;IACtB,MAAM;IACN,cAAc;IACd,MAAM;IACN,cAAc;IACd,MAAM;IACN,eAAe;IACf,MAAM;IACN,UAAU;IACV,MAAM;IACN,mBAAmB;IACnB,MAAM;AACV;;;AAGA;;IAEI;;AAEJ;IACI,wBAAwB;AAC5B;;;AAGA;;IAEI;;AAEJ;IACI,cAAc;AAClB;;;AAGA;;;IAGI;;AAEJ;;IAEI,sBAAsB;IACtB,MAAM;IACN,UAAU;IACV,MAAM;AACV;;;AAGA;;IAEI;;AAEJ;;IAEI,YAAY;AAChB;;;AAGA;;;IAGI;;AAEJ;IACI,6BAA6B;IAC7B,MAAM;IACN,oBAAoB;IACpB,MAAM;AACV;;;AAGA;;IAEI;;AAEJ;IACI,wBAAwB;AAC5B;;;AAGA;;;IAGI;;CAEH;IACG,0BAA0B;IAC1B,MAAM;IACN,aAAa;IACb,MAAM;AACV;;;AAGA;iFACiF;;;AAGjF;;IAEI;;AAEJ;IACI,cAAc;AAClB;;;AAGA;;IAEI;;AAEJ;IACI,kBAAkB;AACtB;;;AAGA;iFACiF;;;AAGjF;;IAEI;;AAEJ;IACI,aAAa;AACjB;;;AAGA;;IAEI;;AAEJ;IACI,aAAa;AACjB",sourcesContent:['/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n\n/* Document\n   ========================================================================== */\n\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n    line-height: 1.15;\n    /* 1 */\n    -webkit-text-size-adjust: 100%;\n    /* 2 */\n}\n\n\n/* Sections\n     ========================================================================== */\n\n\n/**\n   * Remove the margin in all browsers.\n   */\n\nbody {\n    margin: 0;\n}\n\n\n/**\n   * Render the `main` element consistently in IE.\n   */\n\nmain {\n    display: block;\n}\n\n\n/**\n   * Correct the font size and margin on `h1` elements within `section` and\n   * `article` contexts in Chrome, Firefox, and Safari.\n   */\n\nh1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n}\n\n\n/* Grouping content\n     ========================================================================== */\n\n\n/**\n   * 1. Add the correct box sizing in Firefox.\n   * 2. Show the overflow in Edge and IE.\n   */\n\nhr {\n    box-sizing: content-box;\n    /* 1 */\n    height: 0;\n    /* 1 */\n    overflow: visible;\n    /* 2 */\n}\n\n\n/**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n\npre {\n    font-family: monospace, monospace;\n    /* 1 */\n    font-size: 1em;\n    /* 2 */\n}\n\n\n/* Text-level semantics\n     ========================================================================== */\n\n\n/**\n   * Remove the gray background on active links in IE 10.\n   */\n\na {\n    background-color: transparent;\n}\n\n\n/**\n   * 1. Remove the bottom border in Chrome 57-\n   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n   */\n\nabbr[title] {\n    border-bottom: none;\n    /* 1 */\n    text-decoration: underline;\n    /* 2 */\n    text-decoration: underline dotted;\n    /* 2 */\n}\n\n\n/**\n   * Add the correct font weight in Chrome, Edge, and Safari.\n   */\n\nb,\nstrong {\n    font-weight: bolder;\n}\n\n\n/**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n\ncode,\nkbd,\nsamp {\n    font-family: monospace, monospace;\n    /* 1 */\n    font-size: 1em;\n    /* 2 */\n}\n\n\n/**\n   * Add the correct font size in all browsers.\n   */\n\nsmall {\n    font-size: 80%;\n}\n\n\n/**\n   * Prevent `sub` and `sup` elements from affecting the line height in\n   * all browsers.\n   */\n\nsub,\nsup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n}\n\nsub {\n    bottom: -0.25em;\n}\n\nsup {\n    top: -0.5em;\n}\n\n\n/* Embedded content\n     ========================================================================== */\n\n\n/**\n   * Remove the border on images inside links in IE 10.\n   */\n\nimg {\n    border-style: none;\n}\n\n\n/* Forms\n     ========================================================================== */\n\n\n/**\n   * 1. Change the font styles in all browsers.\n   * 2. Remove the margin in Firefox and Safari.\n   */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n    font-family: inherit;\n    /* 1 */\n    font-size: 100%;\n    /* 1 */\n    line-height: 1.15;\n    /* 1 */\n    margin: 0;\n    /* 2 */\n}\n\n\n/**\n   * Show the overflow in IE.\n   * 1. Show the overflow in Edge.\n   */\n\nbutton,\ninput {\n    /* 1 */\n    overflow: visible;\n}\n\n\n/**\n   * Remove the inheritance of text transform in Edge, Firefox, and IE.\n   * 1. Remove the inheritance of text transform in Firefox.\n   */\n\nbutton,\nselect {\n    /* 1 */\n    text-transform: none;\n}\n\n\n/**\n   * Correct the inability to style clickable types in iOS and Safari.\n   */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n    -webkit-appearance: button;\n}\n\n\n/**\n   * Remove the inner border and padding in Firefox.\n   */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n}\n\n\n/**\n   * Restore the focus styles unset by the previous rule.\n   */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n    outline: 1px dotted ButtonText;\n}\n\n\n/**\n   * Correct the padding in Firefox.\n   */\n\nfieldset {\n    padding: 0.35em 0.75em 0.625em;\n}\n\n\n/**\n   * 1. Correct the text wrapping in Edge and IE.\n   * 2. Correct the color inheritance from `fieldset` elements in IE.\n   * 3. Remove the padding so developers are not caught out when they zero out\n   *    `fieldset` elements in all browsers.\n   */\n\nlegend {\n    box-sizing: border-box;\n    /* 1 */\n    color: inherit;\n    /* 2 */\n    display: table;\n    /* 1 */\n    max-width: 100%;\n    /* 1 */\n    padding: 0;\n    /* 3 */\n    white-space: normal;\n    /* 1 */\n}\n\n\n/**\n   * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n   */\n\nprogress {\n    vertical-align: baseline;\n}\n\n\n/**\n   * Remove the default vertical scrollbar in IE 10+.\n   */\n\ntextarea {\n    overflow: auto;\n}\n\n\n/**\n   * 1. Add the correct box sizing in IE 10.\n   * 2. Remove the padding in IE 10.\n   */\n\n[type="checkbox"],\n[type="radio"] {\n    box-sizing: border-box;\n    /* 1 */\n    padding: 0;\n    /* 2 */\n}\n\n\n/**\n   * Correct the cursor style of increment and decrement buttons in Chrome.\n   */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n    height: auto;\n}\n\n\n/**\n   * 1. Correct the odd appearance in Chrome and Safari.\n   * 2. Correct the outline style in Safari.\n   */\n\n[type="search"] {\n    -webkit-appearance: textfield;\n    /* 1 */\n    outline-offset: -2px;\n    /* 2 */\n}\n\n\n/**\n   * Remove the inner padding in Chrome and Safari on macOS.\n   */\n\n[type="search"]::-webkit-search-decoration {\n    -webkit-appearance: none;\n}\n\n\n/**\n   * 1. Correct the inability to style clickable types in iOS and Safari.\n   * 2. Change font properties to `inherit` in Safari.\n   */\n\n ::-webkit-file-upload-button {\n    -webkit-appearance: button;\n    /* 1 */\n    font: inherit;\n    /* 2 */\n}\n\n\n/* Interactive\n     ========================================================================== */\n\n\n/*\n   * Add the correct display in Edge, IE 10+, and Firefox.\n   */\n\ndetails {\n    display: block;\n}\n\n\n/*\n   * Add the correct display in all browsers.\n   */\n\nsummary {\n    display: list-item;\n}\n\n\n/* Misc\n     ========================================================================== */\n\n\n/**\n   * Add the correct display in IE 10+.\n   */\n\ntemplate {\n    display: none;\n}\n\n\n/**\n   * Add the correct display in IE 10.\n   */\n\n[hidden] {\n    display: none;\n}'],sourceRoot:""}]);const A=a},890:(n,e,t)=>{t.d(e,{Z:()=>u});var r=t(537),i=t.n(r),o=t(645),a=t.n(o),A=t(721),s=t(667),c=t.n(s),l=new URL(t(695),t.b),d=a()(i());d.i(A.Z);var h=c()(l);d.push([n.id,`:root {\n    --clr-neutral: hsl(0, 0%, 100%);\n    --clr-neutral-transp: rgba(255, 255, 255, 0.171);\n    --ff-primary: 'Freehand', cursive;\n    /* font weight*/\n    --fw-300: 300;\n    --fw-400: 400;\n    --fw-500: 500;\n    --fw-600: 600;\n    --fw-700: 700;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    width: 100vw;\n    min-height: 100vh;\n    background-color: rgb(142, 227, 233);\n    font-family: var(--ff-primary);\n    color: #ffffff;\n    font-family: var(--ff-primary);\n    font-size: 1.25rem;\n}\n\nmain {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    position: relative;\n    height: 100vh;\n    width: 100vw;\n    padding: 4rem 2rem;\n    overflow: hidden;\n}\n\n.video-container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    z-index: -5;\n}\n\nvideo {\n    width: 100vw;\n    height: 100vh;\n    object-fit: cover;\n}\n\n.unitC,\n.unitF {\n    font-size: 0.85rem;\n    height: 16px;\n    width: 16px;\n    border-radius: 8px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: hsl(0, 0%, 0%);\n    z-index: 20;\n    pointer-events: none;\n    text-shadow: none;\n}\n\n.unitF {\n    color: hsl(0, 0%, 100%);\n}\n\n.checkbox {\n    position: absolute;\n    top: 3rem;\n    left: 3rem;\n}\n\n.checkbox {\n    position: absolute;\n    opacity: 0;\n}\n\n.label {\n    border-radius: 50px;\n    width: 500px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 5px;\n    position: relative;\n    right: 50px;\n    float: right;\n    height: 26px;\n    width: 50px;\n    transform: scale(1.5);\n    background-color: #111;\n}\n\n.label .ball {\n    height: 20px;\n    width: 20px;\n    border-radius: 50%;\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    background: #f5f4f4;\n    transform: translateX(0px);\n    transition: transform 0.2s linear;\n}\n\n.checkbox:checked+.label .ball {\n    transform: translateX(24px);\n}\n\n.search-wrapper {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 10px;\n}\n\n.search-wrapper input {\n    width: 40%;\n    padding: 10px 10px 10px 40px;\n    border-radius: 2rem;\n    border: none;\n    background-image: url(${h});\n    background-repeat: no-repeat;\n    background-position: 10px center;\n    background-size: calc(1rem + 0.5vw);\n    background-color: white;\n    text-shadow: none;\n}\n\n#error {\n    display: none;\n    font-size: 1.5rem;\n    color: hsl(0, 100%, 50%);\n}\n\n.city-info h1 {\n    margin: 0.3rem 0;\n    letter-spacing: 0.1rem;\n    text-transform: uppercase;\n    font-weight: var(--fw-600);\n    font-size: 2.5rem;\n}\n\nh2 {\n    font-size: 1.5rem;\n    font-weight: var(--fw-300);\n}\n\n.current-weather {\n    display: flex;\n    justify-content: space-around;\n}\n\n.current-weather__container {\n    display: flex;\n}\n\n.current-weather__container img {\n    display: flex;\n    align-self: start;\n    width: calc(7rem + 10vw);\n}\n\n.current-weather_cointainer h1 {\n    margin: 0.3rem 0;\n    font-size: 4rem;\n    font-weight: var(--fw-400);\n}\n\n.current-weather__temp {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.current-weather__details {\n    display: flex;\n    align-items: center;\n    align-self: center;\n    height: max-content;\n    padding: 2rem 4rem;\n    gap: 4rem;\n    border-radius: 0.5rem;\n    background-color: var(--clr-neutral-transp);\n}\n\n.current-weather__item {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    font-size: 1.5rem;\n}\n\n.current-weather__item img {\n    width: calc(1rem + 1vw);\n}\n\n.current-weather__details__column {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.forecast {\n    display: flex;\n    justify-content: space-around;\n    width: 100%;\n    padding: 1rem 2rem;\n    border-radius: 0.5rem;\n    background-color: var(--clr-neutral-transp);\n}\n\n.forecast__item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.forecast__item img {\n    width: calc(2rem + 3vw);\n}\n\n.color-black {\n    color: #070707;\n}`,"",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AACA;IACI,+BAA+B;IAC/B,gDAAgD;IAChD,iCAAiC;IACjC,eAAe;IACf,aAAa;IACb,aAAa;IACb,aAAa;IACb,aAAa;IACb,aAAa;AACjB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,YAAY;IACZ,iBAAiB;IACjB,oCAAoC;IACpC,8BAA8B;IAC9B,cAAc;IACd,8BAA8B;IAC9B,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,kBAAkB;IAClB,aAAa;IACb,YAAY;IACZ,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,YAAY;IACZ,aAAa;IACb,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,iBAAiB;AACrB;;AAEA;;IAEI,kBAAkB;IAClB,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,qBAAqB;IACrB,WAAW;IACX,oBAAoB;IACpB,iBAAiB;AACrB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,YAAY;IACZ,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,WAAW;IACX,qBAAqB;IACrB,sBAAsB;AAC1B;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,mBAAmB;IACnB,0BAA0B;IAC1B,iCAAiC;AACrC;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,UAAU;IACV,4BAA4B;IAC5B,mBAAmB;IACnB,YAAY;IACZ,yDAA4C;IAC5C,4BAA4B;IAC5B,gCAAgC;IAChC,mCAAmC;IACnC,uBAAuB;IACvB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,wBAAwB;AAC5B;;AAEA;IACI,gBAAgB;IAChB,sBAAsB;IACtB,yBAAyB;IACzB,0BAA0B;IAC1B,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,0BAA0B;AAC9B;;AAEA;IACI,aAAa;IACb,6BAA6B;AACjC;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,wBAAwB;AAC5B;;AAEA;IACI,gBAAgB;IAChB,eAAe;IACf,0BAA0B;AAC9B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,mBAAmB;IACnB,kBAAkB;IAClB,SAAS;IACT,qBAAqB;IACrB,2CAA2C;AAC/C;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,WAAW;IACX,kBAAkB;IAClB,qBAAqB;IACrB,2CAA2C;AAC/C;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,cAAc;AAClB",sourcesContent:["@import url(./nomarlize.css);\n:root {\n    --clr-neutral: hsl(0, 0%, 100%);\n    --clr-neutral-transp: rgba(255, 255, 255, 0.171);\n    --ff-primary: 'Freehand', cursive;\n    /* font weight*/\n    --fw-300: 300;\n    --fw-400: 400;\n    --fw-500: 500;\n    --fw-600: 600;\n    --fw-700: 700;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    width: 100vw;\n    min-height: 100vh;\n    background-color: rgb(142, 227, 233);\n    font-family: var(--ff-primary);\n    color: #ffffff;\n    font-family: var(--ff-primary);\n    font-size: 1.25rem;\n}\n\nmain {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    position: relative;\n    height: 100vh;\n    width: 100vw;\n    padding: 4rem 2rem;\n    overflow: hidden;\n}\n\n.video-container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    z-index: -5;\n}\n\nvideo {\n    width: 100vw;\n    height: 100vh;\n    object-fit: cover;\n}\n\n.unitC,\n.unitF {\n    font-size: 0.85rem;\n    height: 16px;\n    width: 16px;\n    border-radius: 8px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: hsl(0, 0%, 0%);\n    z-index: 20;\n    pointer-events: none;\n    text-shadow: none;\n}\n\n.unitF {\n    color: hsl(0, 0%, 100%);\n}\n\n.checkbox {\n    position: absolute;\n    top: 3rem;\n    left: 3rem;\n}\n\n.checkbox {\n    position: absolute;\n    opacity: 0;\n}\n\n.label {\n    border-radius: 50px;\n    width: 500px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 5px;\n    position: relative;\n    right: 50px;\n    float: right;\n    height: 26px;\n    width: 50px;\n    transform: scale(1.5);\n    background-color: #111;\n}\n\n.label .ball {\n    height: 20px;\n    width: 20px;\n    border-radius: 50%;\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    background: #f5f4f4;\n    transform: translateX(0px);\n    transition: transform 0.2s linear;\n}\n\n.checkbox:checked+.label .ball {\n    transform: translateX(24px);\n}\n\n.search-wrapper {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 10px;\n}\n\n.search-wrapper input {\n    width: 40%;\n    padding: 10px 10px 10px 40px;\n    border-radius: 2rem;\n    border: none;\n    background-image: url(../images/magnify.png);\n    background-repeat: no-repeat;\n    background-position: 10px center;\n    background-size: calc(1rem + 0.5vw);\n    background-color: white;\n    text-shadow: none;\n}\n\n#error {\n    display: none;\n    font-size: 1.5rem;\n    color: hsl(0, 100%, 50%);\n}\n\n.city-info h1 {\n    margin: 0.3rem 0;\n    letter-spacing: 0.1rem;\n    text-transform: uppercase;\n    font-weight: var(--fw-600);\n    font-size: 2.5rem;\n}\n\nh2 {\n    font-size: 1.5rem;\n    font-weight: var(--fw-300);\n}\n\n.current-weather {\n    display: flex;\n    justify-content: space-around;\n}\n\n.current-weather__container {\n    display: flex;\n}\n\n.current-weather__container img {\n    display: flex;\n    align-self: start;\n    width: calc(7rem + 10vw);\n}\n\n.current-weather_cointainer h1 {\n    margin: 0.3rem 0;\n    font-size: 4rem;\n    font-weight: var(--fw-400);\n}\n\n.current-weather__temp {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.current-weather__details {\n    display: flex;\n    align-items: center;\n    align-self: center;\n    height: max-content;\n    padding: 2rem 4rem;\n    gap: 4rem;\n    border-radius: 0.5rem;\n    background-color: var(--clr-neutral-transp);\n}\n\n.current-weather__item {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    font-size: 1.5rem;\n}\n\n.current-weather__item img {\n    width: calc(1rem + 1vw);\n}\n\n.current-weather__details__column {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.forecast {\n    display: flex;\n    justify-content: space-around;\n    width: 100%;\n    padding: 1rem 2rem;\n    border-radius: 0.5rem;\n    background-color: var(--clr-neutral-transp);\n}\n\n.forecast__item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.forecast__item img {\n    width: calc(2rem + 3vw);\n}\n\n.color-black {\n    color: #070707;\n}"],sourceRoot:""}]);const u=d},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,i,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var A=0;A<this.length;A++){var s=this[A][0];null!=s&&(a[s]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);r&&a[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),e.push(l))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},a=[],A=0;A<n.length;A++){var s=n[A],c=r.base?s[0]+r.base:s[0],l=o[c]||0,d="".concat(c," ").concat(l);o[c]=l+1;var h=t(d),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==h)e[h].references++,e[h].updater(u);else{var m=i(u,r);r.byIndex=A,e.splice(A,0,{identifier:d,updater:m,references:1})}a.push(d)}return a}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var o=r(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var A=t(o[a]);e[A].references--}for(var s=r(n,i),c=0;c<o.length;c++){var l=t(o[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},695:(n,e,t)=>{n.exports=t.p+"001051c069dde3ca2ccb.png"}},e={};function t(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&!n;)n=r[i--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),i=t.n(r),o=t(569),a=t.n(o),A=t(565),s=t.n(A),c=t(216),l=t.n(c),d=t(589),h=t.n(d),u=t(890),m={};m.styleTagTransform=h(),m.setAttributes=s(),m.insert=a().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=l(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;class p{constructor(){this.urlGenerator=new f("d3897c1489c0d8ecea8aecab91da4d1d")}async getGeoCoordinates(n){try{const e=this.urlGenerator.generateGeoCoordsUrl(n),t=await fetch(e,{mode:"cors"}),r=await t.json(),{lat:i,lon:o}=r[0];return document.getElementById("error").style.display="none",{lat:i,lon:o}}catch(n){return console.log(n),document.getElementById("error").style.display="block",null}}async getCurrentWeatherData(n,e){try{const{lat:t,lon:r}=await this.getGeoCoordinates(n),i=this.urlGenerator.generateCurrentWeather(t,r,e),o=await fetch(i,{mode:"cors"}),a=await o.json();return document.getElementById("error").style.display="none",a}catch(n){return console.log(n),document.getElementById("error").style.display="block",null}}async getForecastWeatherData(n,e){try{const{lat:t,lon:r}=await this.getGeoCoordinates(n),i=this.urlGenerator.generateForecastWeather(t,r,e),o=await fetch(i,{mode:"cors"}),a=await o.json();return document.getElementById("error").style.display="none",a}catch(n){return console.log(n),document.getElementById("error").style.display="block",null}}}class f{constructor(n){this.baseUrl="https://api.openweathermap.org",this.appId=n}generateGeoCoordsUrl(n){return`${this.baseUrl}/geo/1.0/direct?q=${n}&appid=${this.appId}`}generateCurrentWeather(n,e,t){return`${this.baseUrl}/data/2.5/weather?lat=${n}&lon=${e}&appid=${this.appId}&units=${t}`}generateForecastWeather(n,e,t){return`${this.baseUrl}/data/2.5/forecast?lat=${n}&lon=${e}&cnt=&appid=${this.appId}&units=${t}`}}class C{constructor(n){this.cityDescription=this.createCityDescription(n),this.dateDescription=this.createDateDescription(n)}createCityDescription(n){const e=n.name,{country:t}=n.sys;return`${e}, ${t}`}createDateDescription(n){return`${this.getDay()}, ${this.getMonth()} ${this.getDate()}`}getDay(){return["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][(new Date).getDay()]}getMonth(){return["January","February","March","April","May","June","July","August","September","October","November","December"][(new Date).getMonth()]}getDate(){return(new Date).getDate()}}class I{constructor(n,e){this.temperature=this.getTemperature(Math.round(n.main.temp),e),this.feelsLikeTemp=this.getTemperature(Math.round(n.main.feels_like),e),this.humidity=`${n.main.humidity}%`,this.windSpeed=`${n.wind.speed}m/s`,this.pressure=`${n.main.pressure} hPa`,this.sunrise=this.convertToSearchedCityTime(n.sys.sunrise,n.timezone),this.sunset=this.convertToSearchedCityTime(n.sys.sunset,n.timezone),this.weatherConditionDesc=n.weather[0].description,this.weatherConditionImg=this.getweatherConditionImg(n.weather[0].main,n.sys.sunrise,n.sys.sunset,n.timezone),this.backgroundVideo=this.getBackgroundVideo(this.weatherConditionImg)}getTemperature(n,e){return"metric"===e?`${n} ℃`:`${n} ℉`}convertToSearchedCityDate(n,e){const t=0===n?new Date:new Date(1e3*n),r=t.getTime()+6e4*t.getTimezoneOffset();return new Date(r+1e3*e)}convertToSearchedCityTime(n,e){const t=this.convertToSearchedCityDate(n,e);return`${t.getHours()}:${t.getMinutes()}`}getweatherConditionImg(n,e,t,r){if("Drizzle"===n)return"rain";if(["Smoke","Haze","Dust","Fog","Sand","Dust","Ash","Squall","Tornado"].includes(n))return"Mist";if("Clear"!==n)return n;const i=this.convertToSearchedCityDate(0,r),o=this.convertToSearchedCityDate(e,r),a=this.convertToSearchedCityDate(t,r);return i>o&&i<a?`${n}Day`:`${n}Night`}getBackgroundVideo(n){return{ClearDay:"https://player.vimeo.com/external/420221145.hd.mp4?s=3959bcbf4829a95ce4b2940192074d7469ff984b&profile_id=175&oauth2_token_id=57447761",ClearNight:"https://player.vimeo.com/external/333584599.sd.mp4?s=df21eca618f9749cf2f734fee7c94fc1a09d0f54&amp;profile_id=164&amp;oauth2_token_id=57447761",Clouds:"https://player.vimeo.com/external/444192978.hd.mp4?s=18ab734562d8c4ea0ec2fed7f16f3edf6158ddcc&profile_id=172&oauth2_token_id=57447761",Mist:"https://player.vimeo.com/external/350241088.hd.mp4?s=3a287426e0146dab6ea738f4629c6f0989a89603&profile_id=172&oauth2_token_id=57447761",Rain:"https://player.vimeo.com/progressive_redirect/playback/708629823/rendition/720p/file.mp4?loc=external&oauth2_token_id=57447761&signature=9951e451334fdfbcf9eb6b8c933fd01dd12a54a03fdb371f0da864a17aaeaf29",Mist:"https://player.vimeo.com/external/350241088.hd.mp4?s=3a287426e0146dab6ea738f4629c6f0989a89603&profile_id=172&oauth2_token_id=57447761",Thunderstorm:"https://player.vimeo.com/external/480223896.hd.mp4?s=e4b94f0b5700bfa68cb6f02b41f94ecca91242e9&profile_id=169&oauth2_token_id=57447761"}[n]}}class g{constructor(n,e){this.temperature=this.getTemperature(n,e),this.weatherCondition=this.getWeatherConditions(n),this.time=this.getTime(n)}getTemperature(n,e){const t=[];return n.list.forEach((n=>{const r=Math.round(n.main.temp),i=this.getTemperatureUnit(r,e);t.push(i)})),t}getTemperatureUnit(n,e){return"metric"===e?`${n}℃`:`${n}℉`}convertToSearchedCityDate(n,e){const t=new Date(1e3*n),r=t.getTime()+6e4*t.getTimezoneOffset();return new Date(r+1e3*e)}getWeatherConditionImg(n,e,t,r,i){if("Clear"!==n)return n;const o=this.convertToSearchedCityDate(e,i).getHours(),a=this.convertToSearchedCityDate(t,i).getHours(),A=this.convertToSearchedCityDate(r,i).getHours();return o>a&&o<A?`${n}Day`:`${n}Night`}getWeatherConditions(n){const e=[],t=n.city.sunrise,r=n.city.sunset,{timezone:i}=n.city;return n.list.forEach((n=>{const o=this.getWeatherConditionImg(n.weather[0].main,n.dt,t,r,i);e.push(o)})),e}getTime(n){const e=[],{timezone:t}=n.city;return n.list.forEach((n=>{const r=this.convertToSearchedTime(n,t);e.push(r)})),e}convertToSearchedTime(n,e){const t=new Date(1e3*n.dt),r=t.getTime()+6e4*t.getTimezoneOffset();return`${new Date(r+1e3*e).getHours()}:00`}}class b{constructor(n,e){this.element=n,this.model=e,this.city=e.cityDescription,this.date=e.dateDescription}get city(){return this.element.querySelector("h1")}set city(n){this.city.textContent=n}get date(){return this.element.querySelector("h2")}set date(n){this.date.textContent=n}}class B{constructor(n,e){this.element=n,this.model=e,this.temperature=e.temperature,this.feelsLikeTemp=e.feelsLikeTemp,this.humidity=e.humidity,this.windSpeed=e.windSpeed,this.pressure=e.pressure,this.sunrise=e.sunrise,this.sunset=e.sunset,this.weatherConditionDesc=e.weatherConditionDesc,this.weatherConditionImg=e.weatherConditionImg,this.backgroundVideo=e.backgroundVideo,this.nowWeatherCondition=e.weatherConditionImg,this.nowTemperature=e.temperature}weatherColor(n){"Rain"==n||"Mist"==n?document.body.classList.add("color-black"):"ClearDay"!=n&&"Night"!=n||document.body.classList.add("color-black")}get temperature(){return this.element.querySelector("h1")}set temperature(n){this.temperature.textContent=n}get feelsLikeTemp(){return this.element.querySelector(".feels-like")}set feelsLikeTemp(n){this.feelsLikeTemp.textContent=n}get humidity(){return this.element.querySelector(".humidity")}set humidity(n){this.humidity.textContent=n}get windSpeed(){return this.element.querySelector(".wind-speed")}set windSpeed(n){this.windSpeed.textContent=n}get pressure(){return this.element.querySelector(".pressure")}set pressure(n){this.pressure.textContent=n}get sunrise(){return this.element.querySelector(".sunrise")}set sunrise(n){this.sunrise.textContent=n}get sunset(){return this.element.querySelector(".sunset")}set sunset(n){this.sunset.textContent=n}get weatherConditionDesc(){return this.element.querySelector("h2")}set weatherConditionDesc(n){this.weatherConditionDesc.textContent=n}get weatherConditionImg(){return this.element.querySelector("img")}set weatherConditionImg(n){this.weatherConditionImg.src=`./images/${n}.png`,this.weatherColor(n)}get backgroundVideo(){return document.getElementById("video")}set backgroundVideo(n){this.backgroundVideo.src=n}get nowWeatherCondition(){return document.getElementById("forecast__item__current__condition")}set nowWeatherCondition(n){this.nowWeatherCondition.src=`./images/${n}.png`}get nowTemperature(){return document.getElementById("forecast__item__current__temp")}set nowTemperature(n){this.nowTemperature.textContent=n}}class y{constructor(n,e){this.element=n,this.model=e,this.temperatures=e.temperature,this.weatherConditions=e.weatherCondition,this.times=e.time}get times(){return this.element.querySelectorAll(".forecast__item__time")}set times(n){for(let e=0;e<this.times.length;e++)this.times[e].textContent=n[e]}get temperatures(){return this.element.querySelectorAll(".forecast__item__temperature")}set temperatures(n){for(let e=0;e<this.times.length;e++)this.temperatures[e].textContent=n[e]}get weatherConditions(){return this.element.querySelectorAll("img")}set weatherConditions(n){for(let e=1;e<this.weatherConditions.length;e++)this.weatherConditions[e].src=`./images/${n[e-1]}.png`}}const w=new class{constructor(){this.data={},this.APIs=new p}async getCityInfo(n,e){const t=await this.APIs.getCurrentWeatherData(n,e);return new C(t)}async getCurrentWeather(n,e){const t=await this.APIs.getCurrentWeatherData(n,e);return new I(t,e)}async getForecastWeather(n,e){const t=await this.APIs.getForecastWeatherData(n,e);return new g(t,e)}},v=new class{appendCityInfo(n){const e=document.getElementById("city-info");new b(e,n)}appendCurrrentWeather(n){const e=document.getElementById("current-weather");new B(e,n)}appendForecastWeather(n){const e=document.getElementById("forecast");new y(e,n)}changeUnitTemp(n){"imperial"===n?(document.querySelector(".unitC").style.color="white",document.querySelector(".unitF").style.color="black"):(document.querySelector(".unitF").style.color="white",document.querySelector(".unitC").style.color="black")}};new class{constructor(n,e){this.model=n,this.view=e,this.city={},this.unit="metric";const t=document.getElementById("search"),r=document.getElementById("checkbox-unit");t.addEventListener("blur",(n=>this.loadpage(t.value))),t.addEventListener("keypress",(n=>this.checkIfEnter(n))),window.addEventListener("load",(()=>this.loadpage("nairobi"))),r.addEventListener("change",(n=>this.changeTemperature(n)))}async loadpage(n){document.getElementById("video").playbackRate=.5,this.city=n;const e=await this.model.getCityInfo(n,this.unit),t=await this.model.getCurrentWeather(n,this.unit),r=await this.model.getForecastWeather(n,this.unit);this.view.appendCityInfo(e),this.view.appendCurrrentWeather(t),this.view.appendForecastWeather(r)}checkIfEnter(n){"Enter"===n.key&&search.blur()}changeTemperature(n){const e=n.currentTarget.checked?"imperial":"metric";this.view.changeUnitTemp(e),this.unit=e,this.loadpage(this.city)}}(w,v)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,